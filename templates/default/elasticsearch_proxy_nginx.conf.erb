server {
  listen   <%= node.elasticsearch[:nginx][:port] %>;
  server_name  elasticsearch;

<% if node.elasticsearch[:nginx][:ssl_certificate_key] and node.elasticsearch[:nginx][:ssl_certificate_key] -%>
  ssl on;
  ssl_certificate <%= node.elasticsearch[:nginx][:ssl_certificate] %>;
  ssl_certificate_key <%= node.elasticsearch[:nginx][:ssl_certificate_key] %>;

  ssl_session_timeout 5m;

  ssl_protocols SSLv2 SSLv3 TLSv1;
  ssl_ciphers ALL:!ADH:!EXPORT56:!kEDH:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
  ssl_prefer_server_ciphers on;
<% end -%>

  error_log   <%= node.elasticsearch[:nginx][:log_dir] %>/elasticsearch-errors.log;
  access_log  <%= node.elasticsearch[:nginx][:log_dir] %>/elasticsearch.log;

  location / {

    # Deny Nodes Shutdown API
    if ($request_filename ~ "_shutdown") {
      return 403;
      break;
    }

<% unless node.elasticsearch[:nginx][:allow_cluster_api] %>
    # Deny access to Cluster API
    if ($request_filename ~ "_cluster") {
      return 403;
      break;
    }
<% end %>

    # Pass requests to ElasticSearch
    proxy_pass http://localhost:9200;
    proxy_redirect off;
      
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  Host $http_host;

    # For CORS Ajax
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Credentials true;

    # Authorize access
    auth_basic           "ElasticSearch";
    auth_basic_user_file <%= node.elasticsearch[:nginx][:passwords_file] %>;

  }

}
